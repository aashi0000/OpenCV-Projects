import cv2
import numpy as np
print("package imported")
cap=cv2.VideoCapture(0)
cap.set(3,640)
cap.set(4,480)
#71,105,42
myColors= [[71,105,42,154,255,255],
            [138,118,49,179,255,255]]
myColorValues=[[153,76,0],[127,0,255]]
myPoints=[] #[x,y,colorId]
def find_color(img,myColors,myColorValues):
    imgHSV=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
    count=0
    newPoints=[]
    for color in myColors:
        lower=np.array(color[0:3])
        upper = np.array(color[3:6])
        mask=cv2.inRange(imgHSV,lower,upper)
        x,y=getContours(mask,count,myColorValues)
        cv2.circle(img_result,(x,y),10,myColorValues[count],cv2.FILLED)
        if x!=0 and y!=0:
            newPoints.append([x,y,count])
        count+=1
        #cv2.imshow(str(color[0]),mask)
    return newPoints
def getContours(img,count,myColorValues):
    x=y=w=h=0
    contours,hierarchy = cv2.findContours(img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)
    for cnt in contours:
        area = cv2.contourArea(cnt)

        if area>150:
            cv2.drawContours(img_result, cnt, -1, myColorValues[count], 3)
            peri = cv2.arcLength(cnt,True)
            #print(peri)
            approx = cv2.approxPolyDP(cnt,0.02*peri,True)

            x, y, w, h = cv2.boundingRect(approx)
    return x+w//2,y+h//2
def draw_on_canvas(myPoints,myColorValues):
    for point in myPoints:
        cv2.circle(img_result, (point[0], point[1]), 10, myColorValues[point[2]], cv2.FILLED)

while True:
    success, img=cap.read()
    img_result=img.copy()
    newPoints= find_color(img, myColors,myColorValues)
    if len(newPoints)!=0:
        for newp in newPoints:
            myPoints.append(newp)
    if len(myPoints)!=0:
        draw_on_canvas(myPoints,myColorValues)
    cv2.imshow("video",img_result)

    if cv2.waitKey(1) & 0xFF==ord('q'):
        break